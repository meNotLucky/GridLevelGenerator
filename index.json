{
  "api/LevelGenerator.Generator.GridCell.html": {
    "href": "api/LevelGenerator.Generator.GridCell.html",
    "title": "Class GridCell | Grid Level Generator Documentation",
    "keywords": "Class GridCell Inheritance Object GridCell Namespace : LevelGenerator.Generator Assembly : cs.temp.dll.dll Syntax [Serializable] public class GridCell Constructors GridCell(Vector2, Vector3, Vector3, Vector3) Declaration public GridCell(Vector2 gridPosition, Vector3 worldPosition, Vector3 worldRotation, Vector3 worldScale) Parameters Type Name Description Vector2 gridPosition Vector3 worldPosition Vector3 worldRotation Vector3 worldScale Methods AddNeighbour(GridCell) Declaration public void AddNeighbour(GridCell neighbour) Parameters Type Name Description GridCell neighbour GetGridPosition() Declaration public Vector2 GetGridPosition() Returns Type Description Vector2 GetNeighbours() Declaration public IEnumerable<GridCell> GetNeighbours() Returns Type Description IEnumerable < GridCell > GetPrefab() Declaration public GameObject GetPrefab() Returns Type Description GameObject HasExit(ExitDirection) Declaration public bool HasExit(ExitDirection exit) Parameters Type Name Description ExitDirection exit Returns Type Description Boolean HasRoom() Declaration public bool HasRoom() Returns Type Description Boolean InstantiateRoom(GridRoom) Declaration public void InstantiateRoom(GridRoom gridRoom) Parameters Type Name Description GridRoom gridRoom"
  },
  "api/LevelGenerator.Generator.GridLevelGenerator.html": {
    "href": "api/LevelGenerator.Generator.GridLevelGenerator.html",
    "title": "Class GridLevelGenerator | Grid Level Generator Documentation",
    "keywords": "Class GridLevelGenerator The Level Generator Component. Inheritance Object GridLevelGenerator Namespace : LevelGenerator.Generator Assembly : cs.temp.dll.dll Syntax public class GridLevelGenerator : MonoBehaviour Fields cellPositionOffset Declaration public Vector2 cellPositionOffset Field Value Type Description Vector2 cellRotation Declaration public Vector3 cellRotation Field Value Type Description Vector3 cellScale Declaration public Vector3 cellScale Field Value Type Description Vector3 forcedLevelGeneration Declaration public bool forcedLevelGeneration Field Value Type Description Boolean gridAlignment Declaration public GridAlignment gridAlignment Field Value Type Description GridAlignment gridHeight Declaration public int gridHeight Field Value Type Description Int32 gridWidth Declaration public int gridWidth Field Value Type Description Int32 levelPosition Declaration public Vector3 levelPosition Field Value Type Description Vector3 levelRotation Declaration public Vector3 levelRotation Field Value Type Description Vector3 levelScale Declaration public Vector3 levelScale Field Value Type Description Vector3 levelSeed Declaration public string levelSeed Field Value Type Description String minLevelSize Declaration public int minLevelSize Field Value Type Description Int32 roomTemplates Declaration public List<GridRoom> roomTemplates Field Value Type Description List < GridRoom > Methods ClearLevel() Destroys the current level completely with all of the instantiated GridRoom s. Declaration public void ClearLevel() Remarks The levelSeed will not be deleted, but will be replaced once a new level is generated. GenerateLevelFromSeed() Generates Level From Seed. Declaration public void GenerateLevelFromSeed() GenerateNewLevel() Generates a new level. Declaration public void GenerateNewLevel() GetSeed() Returns the levelSeed of the last generated level. Declaration public string GetSeed() Returns Type Description String levelSeed string SetSeed(String) Sets the levelSeed for the GridLevelGenerator . Declaration public bool SetSeed(string seed) Parameters Type Name Description String seed Returns Type Description Boolean true on success, false if seed is invalid Remarks The seed format is defined by four sections of 7-10 numbers, divided by a dash (-). Example seed: 2885257376-2099986581-1044521005-723764510"
  },
  "api/LevelGenerator.Generator.GridRoom.html": {
    "href": "api/LevelGenerator.Generator.GridRoom.html",
    "title": "Class GridRoom | Grid Level Generator Documentation",
    "keywords": "Class GridRoom Inheritance Object GridRoom Namespace : LevelGenerator.Generator Assembly : cs.temp.dll.dll Syntax [Serializable] public class GridRoom Fields exitDirections Declaration public List<ExitDirection> exitDirections Field Value Type Description List < ExitDirection > fixedPosition Declaration public Vector2 fixedPosition Field Value Type Description Vector2 hasFixedPosition Declaration public bool hasFixedPosition Field Value Type Description Boolean isEssential Declaration public bool isEssential Field Value Type Description Boolean prefab Declaration public GameObject prefab Field Value Type Description GameObject"
  },
  "api/LevelGenerator.Generator.html": {
    "href": "api/LevelGenerator.Generator.html",
    "title": "Namespace LevelGenerator.Generator | Grid Level Generator Documentation",
    "keywords": "Namespace LevelGenerator.Generator Classes GridCell GridLevelGenerator The Level Generator Component. GridRoom"
  },
  "api/LevelGenerator.Utility.ExitDirection.html": {
    "href": "api/LevelGenerator.Utility.ExitDirection.html",
    "title": "Enum ExitDirection | Grid Level Generator Documentation",
    "keywords": "Enum ExitDirection Namespace : LevelGenerator.Utility Assembly : cs.temp.dll.dll Syntax public enum ExitDirection Fields Name Description Bottom Left Right Top"
  },
  "api/LevelGenerator.Utility.GridAlignment.html": {
    "href": "api/LevelGenerator.Utility.GridAlignment.html",
    "title": "Enum GridAlignment | Grid Level Generator Documentation",
    "keywords": "Enum GridAlignment Namespace : LevelGenerator.Utility Assembly : cs.temp.dll.dll Syntax public enum GridAlignment Fields Name Description Horizontal Vertical"
  },
  "api/LevelGenerator.Utility.GridLevelUtility.html": {
    "href": "api/LevelGenerator.Utility.GridLevelUtility.html",
    "title": "Class GridLevelUtility | Grid Level Generator Documentation",
    "keywords": "Class GridLevelUtility Inheritance Object GridLevelUtility Namespace : LevelGenerator.Utility Assembly : cs.temp.dll.dll Syntax public static class GridLevelUtility Methods ExtractSeedData(String) Declaration public static uint[] ExtractSeedData(string seed) Parameters Type Name Description String seed Returns Type Description UInt32 [] ValidateSeed(String) Declaration public static bool ValidateSeed(string seed) Parameters Type Name Description String seed Returns Type Description Boolean"
  },
  "api/LevelGenerator.Utility.html": {
    "href": "api/LevelGenerator.Utility.html",
    "title": "Namespace LevelGenerator.Utility | Grid Level Generator Documentation",
    "keywords": "Namespace LevelGenerator.Utility Classes GridLevelUtility Enums ExitDirection GridAlignment"
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | Grid Level Generator Documentation",
    "keywords": "Add your introductions here!"
  },
  "articles/quickstart.html": {
    "href": "articles/quickstart.html",
    "title": "Quickstart Guide | Grid Level Generator Documentation",
    "keywords": "Quickstart Guide This is a quickstart guide"
  },
  "index.html": {
    "href": "index.html",
    "title": "DocFX for Unity | Grid Level Generator Documentation",
    "keywords": "DocFX for Unity DocFX usage example for Unity projects DocFX tool generates a clean documentation that looks like the Unity documentation with a manual (written in Markdown) and a scripting API (from the C# scripts of the project). This repository contains a simple Unity example project which documentation is automatically generated and deployed online: https://normanderwan.github.io/DocFxForUnity/ . It references both C# API and Unity API. DocFxForUnity documentation manual DocFxForUnity documentation scripting API Setup your documentation Install DocFX . Copy the Documentation/ folder to your Unity project: . ├── Assets + ├── Documentation ├── Package ├── ProjectSettings └── README.md Edit the following properties in Documentation/docfx.json , keep the others as it is: { \"build\": { \"globalMetadata\": // Edit your documentation website info, see: https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#322-reserved-metadata { \"_appTitle\": \"Example Unity documentation\", \"_appFooter\": \"Example Unity documentation\", \"_enableSearch\": true }, \"sitemap\": { \"baseUrl\": \"https://normanderwan.github.io/DocFxForUnity\" // The URL of your documentation website } } It's the configuration file of your documentation. See https://dotnet.github.io/docfx/tutorial/docfx.exe_user_manual.html#3-docfxjson-format for more details. Edit Documentation/filterConfig.yml : apiRules: - include: # The namespaces to generate uidRegex: ^Your\\.Namespace1 type: Namespace - include: uidRegex: ^Your\\.Namespace2 type: Namespace - exclude: uidRegex: .* # Every other namespaces are ignored type: Namespace It tells DocFX which namespaces you want to generate the documentation. See https://dotnet.github.io/docfx/tutorial/howto_filter_out_unwanted_apis_attributes.html for more details. Document your classes and methods. See https://docs.microsoft.com/en-us/dotnet/csharp/codedoc for more details. (Optional) Add your manual pages: Write a Markdown file for each page in Documentation/manual/ . Keep a list of these pages on Documentation/manual/toc.yml . (Optional) Add resources such as images: Copy them to Documentation/resources/ . Reference them on your docs or manual pages. See https://dotnet.github.io/docfx/tutorial/links_and_cross_references.html#link-to-a-file-using-relative-path for more details. (Optional) Document your namespaces: For each namespace, add a Assets/Scripts/Your/Namespace1/Your.Namespace1.md file: --- uid: Your.Namespace1 summary: Description of the Your.Namespace1 namespace. --- See https://dotnet.github.io/docfx/tutorial/intro_overwrite_files.html to know how it works. Generate your documentation: On a command line opened on your project, run: cp README.md Documentation/index.md docfx Documentation/docfx.json --serve The generated website will be visible at http://localhost:8080 . If you want to have a more similar look to the Unity documentation, see this UnityFX template for DocFX: https://github.com/code-beans/UnityFX . Generate automatically your documentation If you're using GitHub: Copy the .github/workflows/documentation.yml workflow to your Unity project: . + ├── .github + | └── workflows + | └── documentation.yml ├── Assets ├── Documentation ├── Package ├── ProjectSettings └── README.md Next push on main branch will build and deploy your documentation to https://<USERNAME>.github.io/<REPOSITORY>/ ! If you're using GitLab, use the provided .gitlab-ci.yml . Generated website is pushed to a public/ directory. See the GitLab Pages documentation for more details. Troubleshooting / FAQ DocFX outputs: Warning:[ExtractMetadata]No project detected for extracting metadata. Solution: On Unity, click Asset > Open C# Project to generate the required .csproj . DocFX outputs: Warning:[ExtractMetadata]No metadata is generated for Assembly-CSharp,Assembly-CSharp-Editor. Solution: Make sure your included your namespace in Documentation/filterConfig.yml : - include: uidRegex: ^Your\\.Namespace1 type: Namespace If you want to reference a specific version of Unity, change this line on your docfx.json : \"xref\": [ \"https://normanderwan.github.io/UnityXrefMaps/<version>/xrefmap.yml\" ], where <version> is a Unity version in the form of YYYY.x ( e.g. 2017.4, 2018.4, 2019.3). Disclaimer This repository is not sponsored by or affiliated with Unity Technologies or its affiliates. “Unity” is a trademark or registered trademark of Unity Technologies or its affiliates in the U.S. and elsewhere."
  }
}