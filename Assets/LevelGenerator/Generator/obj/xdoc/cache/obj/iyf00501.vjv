id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: LevelGenerator.Generator
  commentId: N:LevelGenerator.Generator
  language: CSharp
  name:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  nameWithType:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  qualifiedName:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: LevelGenerator.Generator.GridCell
    commentId: T:LevelGenerator.Generator.GridCell
    language: CSharp
    name:
      CSharp: GridCell
      VB: GridCell
    nameWithType:
      CSharp: GridCell
      VB: GridCell
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridCell
      VB: LevelGenerator.Generator.GridCell
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridCell
      path: ''
      startLine: 6
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class GridCell
        VB: >-
          <Serializable>

          Public Class GridCell
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LevelGenerator.Generator.GridCell.#ctor(Transform,Vector2,Vector3,Vector3,Vector3)
      commentId: M:LevelGenerator.Generator.GridCell.#ctor(Transform,Vector2,Vector3,Vector3,Vector3)
      language: CSharp
      name:
        CSharp: GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
        VB: GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
      nameWithType:
        CSharp: GridCell.GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
        VB: GridCell.GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
        VB: LevelGenerator.Generator.GridCell.GridCell(Transform, Vector2, Vector3, Vector3, Vector3)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: .ctor
        path: ''
        startLine: 17
      syntax:
        content:
          CSharp: public GridCell(Transform parent, Vector2 gridPosition, Vector3 worldPosition, Vector3 worldRotation, Vector3 worldScale)
          VB: Public Sub New(parent As Transform, gridPosition As Vector2, worldPosition As Vector3, worldRotation As Vector3, worldScale As Vector3)
        parameters:
        - id: parent
          type: Global.Transform
        - id: gridPosition
          type: Global.Vector2
        - id: worldPosition
          type: Global.Vector3
        - id: worldRotation
          type: Global.Vector3
        - id: worldScale
          type: Global.Vector3
      overload: LevelGenerator.Generator.GridCell.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      commentId: M:LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      language: CSharp
      name:
        CSharp: AddNeighbour(GridCell)
        VB: AddNeighbour(GridCell)
      nameWithType:
        CSharp: GridCell.AddNeighbour(GridCell)
        VB: GridCell.AddNeighbour(GridCell)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
        VB: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: AddNeighbour
        path: ''
        startLine: 31
      syntax:
        content:
          CSharp: public void AddNeighbour(GridCell neighbour)
          VB: Public Sub AddNeighbour(neighbour As GridCell)
        parameters:
        - id: neighbour
          type: LevelGenerator.Generator.GridCell
      overload: LevelGenerator.Generator.GridCell.AddNeighbour*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      commentId: M:LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      language: CSharp
      name:
        CSharp: InstantiateRoom(GridRoom)
        VB: InstantiateRoom(GridRoom)
      nameWithType:
        CSharp: GridCell.InstantiateRoom(GridRoom)
        VB: GridCell.InstantiateRoom(GridRoom)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
        VB: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: InstantiateRoom
        path: ''
        startLine: 36
      syntax:
        content:
          CSharp: public void InstantiateRoom(GridRoom gridRoom)
          VB: Public Sub InstantiateRoom(gridRoom As GridRoom)
        parameters:
        - id: gridRoom
          type: LevelGenerator.Generator.GridRoom
      overload: LevelGenerator.Generator.GridCell.InstantiateRoom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetGridPosition
      commentId: M:LevelGenerator.Generator.GridCell.GetGridPosition
      language: CSharp
      name:
        CSharp: GetGridPosition()
        VB: GetGridPosition()
      nameWithType:
        CSharp: GridCell.GetGridPosition()
        VB: GridCell.GetGridPosition()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetGridPosition()
        VB: LevelGenerator.Generator.GridCell.GetGridPosition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetGridPosition
        path: ''
        startLine: 45
      syntax:
        content:
          CSharp: public Vector2 GetGridPosition()
          VB: Public Function GetGridPosition As Vector2
        return:
          type: Global.Vector2
      overload: LevelGenerator.Generator.GridCell.GetGridPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetNeighbours
      commentId: M:LevelGenerator.Generator.GridCell.GetNeighbours
      language: CSharp
      name:
        CSharp: GetNeighbours()
        VB: GetNeighbours()
      nameWithType:
        CSharp: GridCell.GetNeighbours()
        VB: GridCell.GetNeighbours()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetNeighbours()
        VB: LevelGenerator.Generator.GridCell.GetNeighbours()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetNeighbours
        path: ''
        startLine: 50
      syntax:
        content:
          CSharp: public IEnumerable<GridCell> GetNeighbours()
          VB: Public Function GetNeighbours As IEnumerable(Of GridCell)
        return:
          type: System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}
      overload: LevelGenerator.Generator.GridCell.GetNeighbours*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetPrefab
      commentId: M:LevelGenerator.Generator.GridCell.GetPrefab
      language: CSharp
      name:
        CSharp: GetPrefab()
        VB: GetPrefab()
      nameWithType:
        CSharp: GridCell.GetPrefab()
        VB: GridCell.GetPrefab()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetPrefab()
        VB: LevelGenerator.Generator.GridCell.GetPrefab()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetPrefab
        path: ''
        startLine: 55
      syntax:
        content:
          CSharp: public GameObject GetPrefab()
          VB: Public Function GetPrefab As GameObject
        return:
          type: Global.GameObject
      overload: LevelGenerator.Generator.GridCell.GetPrefab*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      commentId: M:LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      language: CSharp
      name:
        CSharp: HasExit(ExitDirection)
        VB: HasExit(ExitDirection)
      nameWithType:
        CSharp: GridCell.HasExit(ExitDirection)
        VB: GridCell.HasExit(ExitDirection)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
        VB: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: HasExit
        path: ''
        startLine: 60
      syntax:
        content:
          CSharp: public bool HasExit(ExitDirection exit)
          VB: Public Function HasExit(exit As ExitDirection) As Boolean
        parameters:
        - id: exit
          type: LevelGenerator.Generator.ExitDirection
        return:
          type: System.Boolean
      overload: LevelGenerator.Generator.GridCell.HasExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.HasRoom
      commentId: M:LevelGenerator.Generator.GridCell.HasRoom
      language: CSharp
      name:
        CSharp: HasRoom()
        VB: HasRoom()
      nameWithType:
        CSharp: GridCell.HasRoom()
        VB: GridCell.HasRoom()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.HasRoom()
        VB: LevelGenerator.Generator.GridCell.HasRoom()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: HasRoom
        path: ''
        startLine: 65
      syntax:
        content:
          CSharp: public bool HasRoom()
          VB: Public Function HasRoom As Boolean
        return:
          type: System.Boolean
      overload: LevelGenerator.Generator.GridCell.HasRoom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LevelGenerator.Generator.ExitDirection
    commentId: T:LevelGenerator.Generator.ExitDirection
    language: CSharp
    name:
      CSharp: ExitDirection
      VB: ExitDirection
    nameWithType:
      CSharp: ExitDirection
      VB: ExitDirection
    qualifiedName:
      CSharp: LevelGenerator.Generator.ExitDirection
      VB: LevelGenerator.Generator.ExitDirection
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: ExitDirection
      path: ''
      startLine: 77
    syntax:
      content:
        CSharp: public enum ExitDirection
        VB: Public Enum ExitDirection
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: LevelGenerator.Generator.ExitDirection.Top
      commentId: F:LevelGenerator.Generator.ExitDirection.Top
      language: CSharp
      name:
        CSharp: Top
        VB: Top
      nameWithType:
        CSharp: ExitDirection.Top
        VB: ExitDirection.Top
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Top
        VB: LevelGenerator.Generator.ExitDirection.Top
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Top
        path: ''
        startLine: 77
      syntax:
        content:
          CSharp: Top = 0
          VB: Top = 0
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Right
      commentId: F:LevelGenerator.Generator.ExitDirection.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: ExitDirection.Right
        VB: ExitDirection.Right
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Right
        VB: LevelGenerator.Generator.ExitDirection.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Right
        path: ''
        startLine: 77
      syntax:
        content:
          CSharp: Right = 1
          VB: Right = 1
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Bottom
      commentId: F:LevelGenerator.Generator.ExitDirection.Bottom
      language: CSharp
      name:
        CSharp: Bottom
        VB: Bottom
      nameWithType:
        CSharp: ExitDirection.Bottom
        VB: ExitDirection.Bottom
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Bottom
        VB: LevelGenerator.Generator.ExitDirection.Bottom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Bottom
        path: ''
        startLine: 77
      syntax:
        content:
          CSharp: Bottom = 2
          VB: Bottom = 2
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Left
      commentId: F:LevelGenerator.Generator.ExitDirection.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: ExitDirection.Left
        VB: ExitDirection.Left
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Left
        VB: LevelGenerator.Generator.ExitDirection.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Left
        path: ''
        startLine: 77
      syntax:
        content:
          CSharp: Left = 3
          VB: Left = 3
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: LevelGenerator.Generator.GridRoom
    commentId: T:LevelGenerator.Generator.GridRoom
    language: CSharp
    name:
      CSharp: GridRoom
      VB: GridRoom
    nameWithType:
      CSharp: GridRoom
      VB: GridRoom
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridRoom
      VB: LevelGenerator.Generator.GridRoom
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridRoom
      path: ''
      startLine: 79
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class GridRoom
        VB: >-
          <Serializable>

          Public Class GridRoom
    inheritance:
    - System.Object
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LevelGenerator.Generator.GridRoom.prefab
      commentId: F:LevelGenerator.Generator.GridRoom.prefab
      language: CSharp
      name:
        CSharp: prefab
        VB: prefab
      nameWithType:
        CSharp: GridRoom.prefab
        VB: GridRoom.prefab
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.prefab
        VB: LevelGenerator.Generator.GridRoom.prefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: prefab
        path: ''
        startLine: 82
      syntax:
        content:
          CSharp: public GameObject prefab
          VB: Public prefab As GameObject
        return:
          type: Global.GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.exitDirections
      commentId: F:LevelGenerator.Generator.GridRoom.exitDirections
      language: CSharp
      name:
        CSharp: exitDirections
        VB: exitDirections
      nameWithType:
        CSharp: GridRoom.exitDirections
        VB: GridRoom.exitDirections
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.exitDirections
        VB: LevelGenerator.Generator.GridRoom.exitDirections
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: exitDirections
        path: ''
        startLine: 83
      syntax:
        content:
          CSharp: public List<ExitDirection> exitDirections
          VB: Public exitDirections As List(Of ExitDirection)
        return:
          type: System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.isEssential
      commentId: F:LevelGenerator.Generator.GridRoom.isEssential
      language: CSharp
      name:
        CSharp: isEssential
        VB: isEssential
      nameWithType:
        CSharp: GridRoom.isEssential
        VB: GridRoom.isEssential
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.isEssential
        VB: LevelGenerator.Generator.GridRoom.isEssential
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: isEssential
        path: ''
        startLine: 84
      syntax:
        content:
          CSharp: public bool isEssential
          VB: Public isEssential As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.hasFixedPosition
      commentId: F:LevelGenerator.Generator.GridRoom.hasFixedPosition
      language: CSharp
      name:
        CSharp: hasFixedPosition
        VB: hasFixedPosition
      nameWithType:
        CSharp: GridRoom.hasFixedPosition
        VB: GridRoom.hasFixedPosition
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.hasFixedPosition
        VB: LevelGenerator.Generator.GridRoom.hasFixedPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: hasFixedPosition
        path: ''
        startLine: 84
      syntax:
        content:
          CSharp: public bool hasFixedPosition
          VB: Public hasFixedPosition As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.fixedPosition
      commentId: F:LevelGenerator.Generator.GridRoom.fixedPosition
      language: CSharp
      name:
        CSharp: fixedPosition
        VB: fixedPosition
      nameWithType:
        CSharp: GridRoom.fixedPosition
        VB: GridRoom.fixedPosition
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.fixedPosition
        VB: LevelGenerator.Generator.GridRoom.fixedPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: fixedPosition
        path: ''
        startLine: 85
      syntax:
        content:
          CSharp: public Vector2 fixedPosition
          VB: Public fixedPosition As Vector2
        return:
          type: Global.Vector2
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LevelGenerator.Generator.LevelGenerator
    commentId: T:LevelGenerator.Generator.LevelGenerator
    language: CSharp
    name:
      CSharp: LevelGenerator
      VB: LevelGenerator
    nameWithType:
      CSharp: LevelGenerator
      VB: LevelGenerator
    qualifiedName:
      CSharp: LevelGenerator.Generator.LevelGenerator
      VB: LevelGenerator.Generator.LevelGenerator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: LevelGenerator
      path: ''
      startLine: 103
    summary: "\nThe static Level Generator.\n"
    example: []
    syntax:
      content:
        CSharp: public static class LevelGenerator
        VB: Public Module LevelGenerator
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: LevelGenerator.Generator.LevelGenerator.SetConfiguration(GeneratorConfig)
      commentId: M:LevelGenerator.Generator.LevelGenerator.SetConfiguration(GeneratorConfig)
      language: CSharp
      name:
        CSharp: SetConfiguration(GeneratorConfig)
        VB: SetConfiguration(GeneratorConfig)
      nameWithType:
        CSharp: LevelGenerator.SetConfiguration(GeneratorConfig)
        VB: LevelGenerator.SetConfiguration(GeneratorConfig)
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.SetConfiguration(GeneratorConfig)
        VB: LevelGenerator.Generator.LevelGenerator.SetConfiguration(GeneratorConfig)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: SetConfiguration
        path: ''
        startLine: 121
      syntax:
        content:
          CSharp: public static void SetConfiguration(GeneratorConfig config)
          VB: Public Shared Sub SetConfiguration(config As GeneratorConfig)
        parameters:
        - id: config
          type: Global.GeneratorConfig
      overload: LevelGenerator.Generator.LevelGenerator.SetConfiguration*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
      commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
      language: CSharp
      name:
        CSharp: GenerateNewLevel()
        VB: GenerateNewLevel()
      nameWithType:
        CSharp: LevelGenerator.GenerateNewLevel()
        VB: LevelGenerator.GenerateNewLevel()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel()
        VB: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GenerateNewLevel
        path: ''
        startLine: 143
      summary: "\nGenerates a new level and from a new seed.\n"
      example:
      - "\nThis sample shows how to call the <xref href=\"LevelGenerator.Generator.LevelGenerator.GenerateNewLevel\" data-throw-if-not-resolved=\"false\"></xref> method from an ExampleClass component on a GameObject that also has a <xref href=\"LevelGenerator.Generator.LevelGenerator\" data-throw-if-not-resolved=\"false\"></xref> component.\n<pre><code>using LevelGenerator.Generator;\n\nclass ExampleClass : MonoBehaviour\n{\n    private void Start()\n    {\n        LevelGenerator.GenerateNewLevel();\n    }\n}</code></pre>\n"
      syntax:
        content:
          CSharp: public static void GenerateNewLevel()
          VB: Public Shared Sub GenerateNewLevel
      overload: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        LevelGenerator.Generator.LevelGenerator.GenerateNewLevel: 
        LevelGenerator.Generator.LevelGenerator: 
    - id: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
      commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
      language: CSharp
      name:
        CSharp: GenerateLevelFromSeed()
        VB: GenerateLevelFromSeed()
      nameWithType:
        CSharp: LevelGenerator.GenerateLevelFromSeed()
        VB: LevelGenerator.GenerateLevelFromSeed()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed()
        VB: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GenerateLevelFromSeed
        path: ''
        startLine: 155
      summary: "\nGenerates a Level from the current seed. If the seed is invalid it will generate a new level.\n"
      example: []
      syntax:
        content:
          CSharp: public static void GenerateLevelFromSeed()
          VB: Public Shared Sub GenerateLevelFromSeed
      overload: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed*
      seealso:
      - linkId: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
        commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        LevelGenerator.Generator.LevelGenerator.GenerateNewLevel: 
    - id: LevelGenerator.Generator.LevelGenerator.ClearLevel
      commentId: M:LevelGenerator.Generator.LevelGenerator.ClearLevel
      language: CSharp
      name:
        CSharp: ClearLevel()
        VB: ClearLevel()
      nameWithType:
        CSharp: LevelGenerator.ClearLevel()
        VB: LevelGenerator.ClearLevel()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.ClearLevel()
        VB: LevelGenerator.Generator.LevelGenerator.ClearLevel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: ClearLevel
        path: ''
        startLine: 177
      summary: "\nDestroys the current level completely with all of the instantiated <xref href=\"LevelGenerator.Generator.GridRoom\" data-throw-if-not-resolved=\"false\"></xref>s.\n"
      remarks: "\nThe levelSeed will not be deleted, but will be replaced once a new level is generated.\n"
      example: []
      syntax:
        content:
          CSharp: public static void ClearLevel()
          VB: Public Shared Sub ClearLevel
      overload: LevelGenerator.Generator.LevelGenerator.ClearLevel*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        LevelGenerator.Generator.GridRoom: 
    - id: LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
      commentId: M:LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
      language: CSharp
      name:
        CSharp: SetSeed(String)
        VB: SetSeed(String)
      nameWithType:
        CSharp: LevelGenerator.SetSeed(String)
        VB: LevelGenerator.SetSeed(String)
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
        VB: LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: SetSeed
        path: ''
        startLine: 202
      summary: "\nSets the seed for the <xref href=\"LevelGenerator.Generator.LevelGenerator\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      remarks: "\nThe seed format is defined by four sections of 6-10 numbers, divided by a dash (-).<br />\nExample seed: 2885257376-2099986581-1044521005-723764510\n"
      example: []
      syntax:
        content:
          CSharp: public static bool SetSeed(string seed)
          VB: Public Shared Function SetSeed(seed As String) As Boolean
        parameters:
        - id: seed
          type: System.String
          description: Level Seed string
        return:
          type: System.Boolean
          description: true on success, false if seed is invalid
      overload: LevelGenerator.Generator.LevelGenerator.SetSeed*
      seealso:
      - linkId: LevelGenerator.Generator.LevelGenerator.GetSeed
        commentId: M:LevelGenerator.Generator.LevelGenerator.GetSeed
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        LevelGenerator.Generator.LevelGenerator: 
        LevelGenerator.Generator.LevelGenerator.GetSeed: 
    - id: LevelGenerator.Generator.LevelGenerator.GetSeed
      commentId: M:LevelGenerator.Generator.LevelGenerator.GetSeed
      language: CSharp
      name:
        CSharp: GetSeed()
        VB: GetSeed()
      nameWithType:
        CSharp: LevelGenerator.GetSeed()
        VB: LevelGenerator.GetSeed()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.GetSeed()
        VB: LevelGenerator.Generator.LevelGenerator.GetSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetSeed
        path: ''
        startLine: 217
      summary: "\nReturns the seed of the last generated level.\n"
      example: []
      syntax:
        content:
          CSharp: public static string GetSeed()
          VB: Public Shared Function GetSeed As String
        return:
          type: System.String
          description: Level Seed string
      overload: LevelGenerator.Generator.LevelGenerator.GetSeed*
      seealso:
      - linkId: LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
        commentId: M:LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
      - linkId: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
        commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        LevelGenerator.Generator.LevelGenerator.SetSeed(System.String): 
        LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed: 
    - id: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates
      commentId: M:LevelGenerator.Generator.LevelGenerator.AddCacheDelegates
      language: CSharp
      name:
        CSharp: AddCacheDelegates()
        VB: AddCacheDelegates()
      nameWithType:
        CSharp: LevelGenerator.AddCacheDelegates()
        VB: LevelGenerator.AddCacheDelegates()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates()
        VB: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: AddCacheDelegates
        path: ''
        startLine: 222
      syntax:
        content:
          CSharp: public static void AddCacheDelegates()
          VB: Public Shared Sub AddCacheDelegates
      overload: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates
      commentId: M:LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates
      language: CSharp
      name:
        CSharp: RemoveCacheDelegates()
        VB: RemoveCacheDelegates()
      nameWithType:
        CSharp: LevelGenerator.RemoveCacheDelegates()
        VB: LevelGenerator.RemoveCacheDelegates()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates()
        VB: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: RemoveCacheDelegates
        path: ''
        startLine: 228
      syntax:
        content:
          CSharp: public static void RemoveCacheDelegates()
          VB: Public Shared Sub RemoveCacheDelegates
      overload: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LevelGenerator.Generator.LevelGenerator.ClearCache
      commentId: M:LevelGenerator.Generator.LevelGenerator.ClearCache
      language: CSharp
      name:
        CSharp: ClearCache()
        VB: ClearCache()
      nameWithType:
        CSharp: LevelGenerator.ClearCache()
        VB: LevelGenerator.ClearCache()
      qualifiedName:
        CSharp: LevelGenerator.Generator.LevelGenerator.ClearCache()
        VB: LevelGenerator.Generator.LevelGenerator.ClearCache()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: ClearCache
        path: ''
        startLine: 234
      syntax:
        content:
          CSharp: public static void ClearCache()
          VB: Public Shared Sub ClearCache
      overload: LevelGenerator.Generator.LevelGenerator.ClearCache*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  Global.Transform:
    name:
      CSharp:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
      VB:
      - id: Global.Transform
        name: Transform
        nameWithType: Transform
        qualifiedName: Transform
        isExternal: true
    isDefinition: true
    commentId: '!:Global.Transform'
  Global.Vector2:
    name:
      CSharp:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Global.Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  Global.Vector3:
    name:
      CSharp:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Global.Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  LevelGenerator.Generator.GridCell.#ctor*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.#ctor*
        name: GridCell
        nameWithType: GridCell.GridCell
        qualifiedName: LevelGenerator.Generator.GridCell.GridCell
      VB:
      - id: LevelGenerator.Generator.GridCell.#ctor*
        name: GridCell
        nameWithType: GridCell.GridCell
        qualifiedName: LevelGenerator.Generator.GridCell.GridCell
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.#ctor
  LevelGenerator.Generator:
    name:
      CSharp:
      - name: LevelGenerator.Generator
        nameWithType: LevelGenerator.Generator
        qualifiedName: LevelGenerator.Generator
      VB:
      - name: LevelGenerator.Generator
        nameWithType: LevelGenerator.Generator
        qualifiedName: LevelGenerator.Generator
    isDefinition: true
    commentId: N:LevelGenerator.Generator
  LevelGenerator.Generator.GridCell:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      VB:
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.GridCell
  LevelGenerator.Generator.GridCell.AddNeighbour*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.AddNeighbour*
        name: AddNeighbour
        nameWithType: GridCell.AddNeighbour
        qualifiedName: LevelGenerator.Generator.GridCell.AddNeighbour
      VB:
      - id: LevelGenerator.Generator.GridCell.AddNeighbour*
        name: AddNeighbour
        nameWithType: GridCell.AddNeighbour
        qualifiedName: LevelGenerator.Generator.GridCell.AddNeighbour
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.AddNeighbour
  LevelGenerator.Generator.GridRoom:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
      VB:
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.GridRoom
  LevelGenerator.Generator.GridCell.InstantiateRoom*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.InstantiateRoom*
        name: InstantiateRoom
        nameWithType: GridCell.InstantiateRoom
        qualifiedName: LevelGenerator.Generator.GridCell.InstantiateRoom
      VB:
      - id: LevelGenerator.Generator.GridCell.InstantiateRoom*
        name: InstantiateRoom
        nameWithType: GridCell.InstantiateRoom
        qualifiedName: LevelGenerator.Generator.GridCell.InstantiateRoom
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.InstantiateRoom
  LevelGenerator.Generator.GridCell.GetGridPosition*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetGridPosition*
        name: GetGridPosition
        nameWithType: GridCell.GetGridPosition
        qualifiedName: LevelGenerator.Generator.GridCell.GetGridPosition
      VB:
      - id: LevelGenerator.Generator.GridCell.GetGridPosition*
        name: GetGridPosition
        nameWithType: GridCell.GetGridPosition
        qualifiedName: LevelGenerator.Generator.GridCell.GetGridPosition
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetGridPosition
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}
  LevelGenerator.Generator.GridCell.GetNeighbours*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetNeighbours*
        name: GetNeighbours
        nameWithType: GridCell.GetNeighbours
        qualifiedName: LevelGenerator.Generator.GridCell.GetNeighbours
      VB:
      - id: LevelGenerator.Generator.GridCell.GetNeighbours*
        name: GetNeighbours
        nameWithType: GridCell.GetNeighbours
        qualifiedName: LevelGenerator.Generator.GridCell.GetNeighbours
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetNeighbours
  Global.GameObject:
    name:
      CSharp:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: Global.GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
  LevelGenerator.Generator.GridCell.GetPrefab*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetPrefab*
        name: GetPrefab
        nameWithType: GridCell.GetPrefab
        qualifiedName: LevelGenerator.Generator.GridCell.GetPrefab
      VB:
      - id: LevelGenerator.Generator.GridCell.GetPrefab*
        name: GetPrefab
        nameWithType: GridCell.GetPrefab
        qualifiedName: LevelGenerator.Generator.GridCell.GetPrefab
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetPrefab
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  LevelGenerator.Generator.ExitDirection:
    name:
      CSharp:
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      VB:
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.ExitDirection
  LevelGenerator.Generator.GridCell.HasExit*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.HasExit*
        name: HasExit
        nameWithType: GridCell.HasExit
        qualifiedName: LevelGenerator.Generator.GridCell.HasExit
      VB:
      - id: LevelGenerator.Generator.GridCell.HasExit*
        name: HasExit
        nameWithType: GridCell.HasExit
        qualifiedName: LevelGenerator.Generator.GridCell.HasExit
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.HasExit
  LevelGenerator.Generator.GridCell.HasRoom*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.HasRoom*
        name: HasRoom
        nameWithType: GridCell.HasRoom
        qualifiedName: LevelGenerator.Generator.GridCell.HasRoom
      VB:
      - id: LevelGenerator.Generator.GridCell.HasRoom*
        name: HasRoom
        nameWithType: GridCell.HasRoom
        qualifiedName: LevelGenerator.Generator.GridCell.HasRoom
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.HasRoom
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}
  Global.GeneratorConfig:
    name:
      CSharp:
      - id: Global.GeneratorConfig
        name: GeneratorConfig
        nameWithType: GeneratorConfig
        qualifiedName: GeneratorConfig
        isExternal: true
      VB:
      - id: Global.GeneratorConfig
        name: GeneratorConfig
        nameWithType: GeneratorConfig
        qualifiedName: GeneratorConfig
        isExternal: true
    isDefinition: true
    commentId: '!:Global.GeneratorConfig'
  LevelGenerator.Generator.LevelGenerator.SetConfiguration*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.SetConfiguration*
        name: SetConfiguration
        nameWithType: LevelGenerator.SetConfiguration
        qualifiedName: LevelGenerator.Generator.LevelGenerator.SetConfiguration
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.SetConfiguration*
        name: SetConfiguration
        nameWithType: LevelGenerator.SetConfiguration
        qualifiedName: LevelGenerator.Generator.LevelGenerator.SetConfiguration
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.SetConfiguration
  LevelGenerator.Generator.LevelGenerator.GenerateNewLevel:
    commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
  LevelGenerator.Generator.LevelGenerator:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator
        name: LevelGenerator
        nameWithType: LevelGenerator
        qualifiedName: LevelGenerator.Generator.LevelGenerator
      VB:
      - id: LevelGenerator.Generator.LevelGenerator
        name: LevelGenerator
        nameWithType: LevelGenerator
        qualifiedName: LevelGenerator.Generator.LevelGenerator
    isDefinition: true
    commentId: T:LevelGenerator.Generator.LevelGenerator
  LevelGenerator.Generator.LevelGenerator.GenerateNewLevel*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel*
        name: GenerateNewLevel
        nameWithType: LevelGenerator.GenerateNewLevel
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel*
        name: GenerateNewLevel
        nameWithType: LevelGenerator.GenerateNewLevel
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.GenerateNewLevel
  LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed*
        name: GenerateLevelFromSeed
        nameWithType: LevelGenerator.GenerateLevelFromSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed*
        name: GenerateLevelFromSeed
        nameWithType: LevelGenerator.GenerateLevelFromSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
  LevelGenerator.Generator.LevelGenerator.ClearLevel*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.ClearLevel*
        name: ClearLevel
        nameWithType: LevelGenerator.ClearLevel
        qualifiedName: LevelGenerator.Generator.LevelGenerator.ClearLevel
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.ClearLevel*
        name: ClearLevel
        nameWithType: LevelGenerator.ClearLevel
        qualifiedName: LevelGenerator.Generator.LevelGenerator.ClearLevel
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.ClearLevel
  LevelGenerator.Generator.LevelGenerator.GetSeed:
    commentId: M:LevelGenerator.Generator.LevelGenerator.GetSeed
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  LevelGenerator.Generator.LevelGenerator.SetSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.SetSeed*
        name: SetSeed
        nameWithType: LevelGenerator.SetSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.SetSeed
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.SetSeed*
        name: SetSeed
        nameWithType: LevelGenerator.SetSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.SetSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.SetSeed
  LevelGenerator.Generator.LevelGenerator.SetSeed(System.String):
    commentId: M:LevelGenerator.Generator.LevelGenerator.SetSeed(System.String)
  LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed:
    commentId: M:LevelGenerator.Generator.LevelGenerator.GenerateLevelFromSeed
  LevelGenerator.Generator.LevelGenerator.GetSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.GetSeed*
        name: GetSeed
        nameWithType: LevelGenerator.GetSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GetSeed
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.GetSeed*
        name: GetSeed
        nameWithType: LevelGenerator.GetSeed
        qualifiedName: LevelGenerator.Generator.LevelGenerator.GetSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.GetSeed
  LevelGenerator.Generator.LevelGenerator.AddCacheDelegates*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates*
        name: AddCacheDelegates
        nameWithType: LevelGenerator.AddCacheDelegates
        qualifiedName: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates*
        name: AddCacheDelegates
        nameWithType: LevelGenerator.AddCacheDelegates
        qualifiedName: LevelGenerator.Generator.LevelGenerator.AddCacheDelegates
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.AddCacheDelegates
  LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates*
        name: RemoveCacheDelegates
        nameWithType: LevelGenerator.RemoveCacheDelegates
        qualifiedName: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates*
        name: RemoveCacheDelegates
        nameWithType: LevelGenerator.RemoveCacheDelegates
        qualifiedName: LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.RemoveCacheDelegates
  LevelGenerator.Generator.LevelGenerator.ClearCache*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.LevelGenerator.ClearCache*
        name: ClearCache
        nameWithType: LevelGenerator.ClearCache
        qualifiedName: LevelGenerator.Generator.LevelGenerator.ClearCache
      VB:
      - id: LevelGenerator.Generator.LevelGenerator.ClearCache*
        name: ClearCache
        nameWithType: LevelGenerator.ClearCache
        qualifiedName: LevelGenerator.Generator.LevelGenerator.ClearCache
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.LevelGenerator.ClearCache
