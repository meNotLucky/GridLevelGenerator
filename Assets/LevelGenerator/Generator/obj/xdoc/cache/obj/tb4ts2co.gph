id: cs.temp.dll
language: CSharp
name:
  Default: cs.temp.dll
qualifiedName:
  Default: cs.temp.dll
type: Assembly
modifiers: {}
items:
- id: LevelGenerator.Generator
  commentId: N:LevelGenerator.Generator
  language: CSharp
  name:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  nameWithType:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  qualifiedName:
    CSharp: LevelGenerator.Generator
    VB: LevelGenerator.Generator
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: LevelGenerator.Generator.GridCell
    commentId: T:LevelGenerator.Generator.GridCell
    language: CSharp
    name:
      CSharp: GridCell
      VB: GridCell
    nameWithType:
      CSharp: GridCell
      VB: GridCell
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridCell
      VB: LevelGenerator.Generator.GridCell
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridCell
      path: ''
      startLine: 5
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class GridCell
        VB: >-
          <Serializable>

          Public Class GridCell
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LevelGenerator.Generator.GridCell.#ctor(Vector2,Vector3,Vector3,Vector3)
      commentId: M:LevelGenerator.Generator.GridCell.#ctor(Vector2,Vector3,Vector3,Vector3)
      language: CSharp
      name:
        CSharp: GridCell(Vector2, Vector3, Vector3, Vector3)
        VB: GridCell(Vector2, Vector3, Vector3, Vector3)
      nameWithType:
        CSharp: GridCell.GridCell(Vector2, Vector3, Vector3, Vector3)
        VB: GridCell.GridCell(Vector2, Vector3, Vector3, Vector3)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GridCell(Vector2, Vector3, Vector3, Vector3)
        VB: LevelGenerator.Generator.GridCell.GridCell(Vector2, Vector3, Vector3, Vector3)
      type: Constructor
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: .ctor
        path: ''
        startLine: 16
      syntax:
        content:
          CSharp: public GridCell(Vector2 gridPosition, Vector3 worldPosition, Vector3 worldRotation, Vector3 worldScale)
          VB: Public Sub New(gridPosition As Vector2, worldPosition As Vector3, worldRotation As Vector3, worldScale As Vector3)
        parameters:
        - id: gridPosition
          type: Vector2
        - id: worldPosition
          type: Vector3
        - id: worldRotation
          type: Vector3
        - id: worldScale
          type: Vector3
      overload: LevelGenerator.Generator.GridCell.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      commentId: M:LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      language: CSharp
      name:
        CSharp: AddNeighbour(GridCell)
        VB: AddNeighbour(GridCell)
      nameWithType:
        CSharp: GridCell.AddNeighbour(GridCell)
        VB: GridCell.AddNeighbour(GridCell)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
        VB: LevelGenerator.Generator.GridCell.AddNeighbour(LevelGenerator.Generator.GridCell)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: AddNeighbour
        path: ''
        startLine: 30
      syntax:
        content:
          CSharp: public void AddNeighbour(GridCell neighbour)
          VB: Public Sub AddNeighbour(neighbour As GridCell)
        parameters:
        - id: neighbour
          type: LevelGenerator.Generator.GridCell
      overload: LevelGenerator.Generator.GridCell.AddNeighbour*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      commentId: M:LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      language: CSharp
      name:
        CSharp: InstantiateRoom(GridRoom)
        VB: InstantiateRoom(GridRoom)
      nameWithType:
        CSharp: GridCell.InstantiateRoom(GridRoom)
        VB: GridCell.InstantiateRoom(GridRoom)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
        VB: LevelGenerator.Generator.GridCell.InstantiateRoom(LevelGenerator.Generator.GridRoom)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: InstantiateRoom
        path: ''
        startLine: 35
      syntax:
        content:
          CSharp: public void InstantiateRoom(GridRoom gridRoom)
          VB: Public Sub InstantiateRoom(gridRoom As GridRoom)
        parameters:
        - id: gridRoom
          type: LevelGenerator.Generator.GridRoom
      overload: LevelGenerator.Generator.GridCell.InstantiateRoom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetGridPosition
      commentId: M:LevelGenerator.Generator.GridCell.GetGridPosition
      language: CSharp
      name:
        CSharp: GetGridPosition()
        VB: GetGridPosition()
      nameWithType:
        CSharp: GridCell.GetGridPosition()
        VB: GridCell.GetGridPosition()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetGridPosition()
        VB: LevelGenerator.Generator.GridCell.GetGridPosition()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetGridPosition
        path: ''
        startLine: 44
      syntax:
        content:
          CSharp: public Vector2 GetGridPosition()
          VB: Public Function GetGridPosition As Vector2
        return:
          type: Vector2
      overload: LevelGenerator.Generator.GridCell.GetGridPosition*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetNeighbours
      commentId: M:LevelGenerator.Generator.GridCell.GetNeighbours
      language: CSharp
      name:
        CSharp: GetNeighbours()
        VB: GetNeighbours()
      nameWithType:
        CSharp: GridCell.GetNeighbours()
        VB: GridCell.GetNeighbours()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetNeighbours()
        VB: LevelGenerator.Generator.GridCell.GetNeighbours()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetNeighbours
        path: ''
        startLine: 49
      syntax:
        content:
          CSharp: public IEnumerable<GridCell> GetNeighbours()
          VB: Public Function GetNeighbours As IEnumerable(Of GridCell)
        return:
          type: System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}
      overload: LevelGenerator.Generator.GridCell.GetNeighbours*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.GetPrefab
      commentId: M:LevelGenerator.Generator.GridCell.GetPrefab
      language: CSharp
      name:
        CSharp: GetPrefab()
        VB: GetPrefab()
      nameWithType:
        CSharp: GridCell.GetPrefab()
        VB: GridCell.GetPrefab()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.GetPrefab()
        VB: LevelGenerator.Generator.GridCell.GetPrefab()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetPrefab
        path: ''
        startLine: 54
      syntax:
        content:
          CSharp: public GameObject GetPrefab()
          VB: Public Function GetPrefab As GameObject
        return:
          type: GameObject
      overload: LevelGenerator.Generator.GridCell.GetPrefab*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      commentId: M:LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      language: CSharp
      name:
        CSharp: HasExit(ExitDirection)
        VB: HasExit(ExitDirection)
      nameWithType:
        CSharp: GridCell.HasExit(ExitDirection)
        VB: GridCell.HasExit(ExitDirection)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
        VB: LevelGenerator.Generator.GridCell.HasExit(LevelGenerator.Generator.ExitDirection)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: HasExit
        path: ''
        startLine: 59
      syntax:
        content:
          CSharp: public bool HasExit(ExitDirection exit)
          VB: Public Function HasExit(exit As ExitDirection) As Boolean
        parameters:
        - id: exit
          type: LevelGenerator.Generator.ExitDirection
        return:
          type: System.Boolean
      overload: LevelGenerator.Generator.GridCell.HasExit*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridCell.HasRoom
      commentId: M:LevelGenerator.Generator.GridCell.HasRoom
      language: CSharp
      name:
        CSharp: HasRoom()
        VB: HasRoom()
      nameWithType:
        CSharp: GridCell.HasRoom()
        VB: GridCell.HasRoom()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridCell.HasRoom()
        VB: LevelGenerator.Generator.GridCell.HasRoom()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: HasRoom
        path: ''
        startLine: 64
      syntax:
        content:
          CSharp: public bool HasRoom()
          VB: Public Function HasRoom As Boolean
        return:
          type: System.Boolean
      overload: LevelGenerator.Generator.GridCell.HasRoom*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LevelGenerator.Generator.ExitDirection
    commentId: T:LevelGenerator.Generator.ExitDirection
    language: CSharp
    name:
      CSharp: ExitDirection
      VB: ExitDirection
    nameWithType:
      CSharp: ExitDirection
      VB: ExitDirection
    qualifiedName:
      CSharp: LevelGenerator.Generator.ExitDirection
      VB: LevelGenerator.Generator.ExitDirection
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: ExitDirection
      path: ''
      startLine: 79
    syntax:
      content:
        CSharp: public enum ExitDirection
        VB: Public Enum ExitDirection
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: LevelGenerator.Generator.ExitDirection.Top
      commentId: F:LevelGenerator.Generator.ExitDirection.Top
      language: CSharp
      name:
        CSharp: Top
        VB: Top
      nameWithType:
        CSharp: ExitDirection.Top
        VB: ExitDirection.Top
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Top
        VB: LevelGenerator.Generator.ExitDirection.Top
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Top
        path: ''
        startLine: 79
      syntax:
        content:
          CSharp: Top = 0
          VB: Top = 0
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Right
      commentId: F:LevelGenerator.Generator.ExitDirection.Right
      language: CSharp
      name:
        CSharp: Right
        VB: Right
      nameWithType:
        CSharp: ExitDirection.Right
        VB: ExitDirection.Right
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Right
        VB: LevelGenerator.Generator.ExitDirection.Right
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Right
        path: ''
        startLine: 79
      syntax:
        content:
          CSharp: Right = 1
          VB: Right = 1
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Bottom
      commentId: F:LevelGenerator.Generator.ExitDirection.Bottom
      language: CSharp
      name:
        CSharp: Bottom
        VB: Bottom
      nameWithType:
        CSharp: ExitDirection.Bottom
        VB: ExitDirection.Bottom
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Bottom
        VB: LevelGenerator.Generator.ExitDirection.Bottom
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Bottom
        path: ''
        startLine: 79
      syntax:
        content:
          CSharp: Bottom = 2
          VB: Bottom = 2
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.ExitDirection.Left
      commentId: F:LevelGenerator.Generator.ExitDirection.Left
      language: CSharp
      name:
        CSharp: Left
        VB: Left
      nameWithType:
        CSharp: ExitDirection.Left
        VB: ExitDirection.Left
      qualifiedName:
        CSharp: LevelGenerator.Generator.ExitDirection.Left
        VB: LevelGenerator.Generator.ExitDirection.Left
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Left
        path: ''
        startLine: 79
      syntax:
        content:
          CSharp: Left = 3
          VB: Left = 3
        return:
          type: LevelGenerator.Generator.ExitDirection
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: LevelGenerator.Generator.GridAlignment
    commentId: T:LevelGenerator.Generator.GridAlignment
    language: CSharp
    name:
      CSharp: GridAlignment
      VB: GridAlignment
    nameWithType:
      CSharp: GridAlignment
      VB: GridAlignment
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridAlignment
      VB: LevelGenerator.Generator.GridAlignment
    type: Enum
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridAlignment
      path: ''
      startLine: 80
    syntax:
      content:
        CSharp: public enum GridAlignment
        VB: Public Enum GridAlignment
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: LevelGenerator.Generator.GridAlignment.Horizontal
      commentId: F:LevelGenerator.Generator.GridAlignment.Horizontal
      language: CSharp
      name:
        CSharp: Horizontal
        VB: Horizontal
      nameWithType:
        CSharp: GridAlignment.Horizontal
        VB: GridAlignment.Horizontal
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridAlignment.Horizontal
        VB: LevelGenerator.Generator.GridAlignment.Horizontal
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Horizontal
        path: ''
        startLine: 80
      syntax:
        content:
          CSharp: Horizontal = 0
          VB: Horizontal = 0
        return:
          type: LevelGenerator.Generator.GridAlignment
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: LevelGenerator.Generator.GridAlignment.Vertical
      commentId: F:LevelGenerator.Generator.GridAlignment.Vertical
      language: CSharp
      name:
        CSharp: Vertical
        VB: Vertical
      nameWithType:
        CSharp: GridAlignment.Vertical
        VB: GridAlignment.Vertical
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridAlignment.Vertical
        VB: LevelGenerator.Generator.GridAlignment.Vertical
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: Vertical
        path: ''
        startLine: 80
      syntax:
        content:
          CSharp: Vertical = 1
          VB: Vertical = 1
        return:
          type: LevelGenerator.Generator.GridAlignment
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
  - id: LevelGenerator.Generator.GridLevelGenerator
    commentId: T:LevelGenerator.Generator.GridLevelGenerator
    language: CSharp
    name:
      CSharp: GridLevelGenerator
      VB: GridLevelGenerator
    nameWithType:
      CSharp: GridLevelGenerator
      VB: GridLevelGenerator
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridLevelGenerator
      VB: LevelGenerator.Generator.GridLevelGenerator
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridLevelGenerator
      path: ''
      startLine: 85
    summary: "\nThe Level Generator Component.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class GridLevelGenerator : MonoBehaviour'
        VB: >-
          Public Class GridLevelGenerator

              Inherits MonoBehaviour
    inheritance:
    - System.Object
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LevelGenerator.Generator.GridLevelGenerator.levelSeed
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.levelSeed
      language: CSharp
      name:
        CSharp: levelSeed
        VB: levelSeed
      nameWithType:
        CSharp: GridLevelGenerator.levelSeed
        VB: GridLevelGenerator.levelSeed
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.levelSeed
        VB: LevelGenerator.Generator.GridLevelGenerator.levelSeed
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: levelSeed
        path: ''
        startLine: 87
      syntax:
        content:
          CSharp: public string levelSeed
          VB: Public levelSeed As String
        return:
          type: System.String
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.gridWidth
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.gridWidth
      language: CSharp
      name:
        CSharp: gridWidth
        VB: gridWidth
      nameWithType:
        CSharp: GridLevelGenerator.gridWidth
        VB: GridLevelGenerator.gridWidth
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.gridWidth
        VB: LevelGenerator.Generator.GridLevelGenerator.gridWidth
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: gridWidth
        path: ''
        startLine: 89
      syntax:
        content:
          CSharp: public int gridWidth
          VB: Public gridWidth As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.gridHeight
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.gridHeight
      language: CSharp
      name:
        CSharp: gridHeight
        VB: gridHeight
      nameWithType:
        CSharp: GridLevelGenerator.gridHeight
        VB: GridLevelGenerator.gridHeight
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.gridHeight
        VB: LevelGenerator.Generator.GridLevelGenerator.gridHeight
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: gridHeight
        path: ''
        startLine: 89
      syntax:
        content:
          CSharp: public int gridHeight
          VB: Public gridHeight As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.minLevelSize
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.minLevelSize
      language: CSharp
      name:
        CSharp: minLevelSize
        VB: minLevelSize
      nameWithType:
        CSharp: GridLevelGenerator.minLevelSize
        VB: GridLevelGenerator.minLevelSize
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.minLevelSize
        VB: LevelGenerator.Generator.GridLevelGenerator.minLevelSize
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: minLevelSize
        path: ''
        startLine: 90
      syntax:
        content:
          CSharp: public int minLevelSize
          VB: Public minLevelSize As Integer
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.forcedLevelGeneration
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.forcedLevelGeneration
      language: CSharp
      name:
        CSharp: forcedLevelGeneration
        VB: forcedLevelGeneration
      nameWithType:
        CSharp: GridLevelGenerator.forcedLevelGeneration
        VB: GridLevelGenerator.forcedLevelGeneration
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.forcedLevelGeneration
        VB: LevelGenerator.Generator.GridLevelGenerator.forcedLevelGeneration
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: forcedLevelGeneration
        path: ''
        startLine: 92
      syntax:
        content:
          CSharp: public bool forcedLevelGeneration
          VB: Public forcedLevelGeneration As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.gridAlignment
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.gridAlignment
      language: CSharp
      name:
        CSharp: gridAlignment
        VB: gridAlignment
      nameWithType:
        CSharp: GridLevelGenerator.gridAlignment
        VB: GridLevelGenerator.gridAlignment
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.gridAlignment
        VB: LevelGenerator.Generator.GridLevelGenerator.gridAlignment
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: gridAlignment
        path: ''
        startLine: 94
      syntax:
        content:
          CSharp: public GridAlignment gridAlignment
          VB: Public gridAlignment As GridAlignment
        return:
          type: LevelGenerator.Generator.GridAlignment
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.cellPositionOffset
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.cellPositionOffset
      language: CSharp
      name:
        CSharp: cellPositionOffset
        VB: cellPositionOffset
      nameWithType:
        CSharp: GridLevelGenerator.cellPositionOffset
        VB: GridLevelGenerator.cellPositionOffset
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.cellPositionOffset
        VB: LevelGenerator.Generator.GridLevelGenerator.cellPositionOffset
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: cellPositionOffset
        path: ''
        startLine: 96
      syntax:
        content:
          CSharp: public Vector2 cellPositionOffset
          VB: Public cellPositionOffset As Vector2
        return:
          type: Vector2
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.cellRotation
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.cellRotation
      language: CSharp
      name:
        CSharp: cellRotation
        VB: cellRotation
      nameWithType:
        CSharp: GridLevelGenerator.cellRotation
        VB: GridLevelGenerator.cellRotation
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.cellRotation
        VB: LevelGenerator.Generator.GridLevelGenerator.cellRotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: cellRotation
        path: ''
        startLine: 98
      syntax:
        content:
          CSharp: public Vector3 cellRotation
          VB: Public cellRotation As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.cellScale
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.cellScale
      language: CSharp
      name:
        CSharp: cellScale
        VB: cellScale
      nameWithType:
        CSharp: GridLevelGenerator.cellScale
        VB: GridLevelGenerator.cellScale
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.cellScale
        VB: LevelGenerator.Generator.GridLevelGenerator.cellScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: cellScale
        path: ''
        startLine: 99
      syntax:
        content:
          CSharp: public Vector3 cellScale
          VB: Public cellScale As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.levelPosition
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.levelPosition
      language: CSharp
      name:
        CSharp: levelPosition
        VB: levelPosition
      nameWithType:
        CSharp: GridLevelGenerator.levelPosition
        VB: GridLevelGenerator.levelPosition
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.levelPosition
        VB: LevelGenerator.Generator.GridLevelGenerator.levelPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: levelPosition
        path: ''
        startLine: 101
      syntax:
        content:
          CSharp: public Vector3 levelPosition
          VB: Public levelPosition As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.levelRotation
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.levelRotation
      language: CSharp
      name:
        CSharp: levelRotation
        VB: levelRotation
      nameWithType:
        CSharp: GridLevelGenerator.levelRotation
        VB: GridLevelGenerator.levelRotation
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.levelRotation
        VB: LevelGenerator.Generator.GridLevelGenerator.levelRotation
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: levelRotation
        path: ''
        startLine: 102
      syntax:
        content:
          CSharp: public Vector3 levelRotation
          VB: Public levelRotation As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.levelScale
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.levelScale
      language: CSharp
      name:
        CSharp: levelScale
        VB: levelScale
      nameWithType:
        CSharp: GridLevelGenerator.levelScale
        VB: GridLevelGenerator.levelScale
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.levelScale
        VB: LevelGenerator.Generator.GridLevelGenerator.levelScale
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: levelScale
        path: ''
        startLine: 103
      syntax:
        content:
          CSharp: public Vector3 levelScale
          VB: Public levelScale As Vector3
        return:
          type: Vector3
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.roomTemplates
      commentId: F:LevelGenerator.Generator.GridLevelGenerator.roomTemplates
      language: CSharp
      name:
        CSharp: roomTemplates
        VB: roomTemplates
      nameWithType:
        CSharp: GridLevelGenerator.roomTemplates
        VB: GridLevelGenerator.roomTemplates
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.roomTemplates
        VB: LevelGenerator.Generator.GridLevelGenerator.roomTemplates
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: roomTemplates
        path: ''
        startLine: 105
      syntax:
        content:
          CSharp: public List<GridRoom> roomTemplates
          VB: Public roomTemplates As List(Of GridRoom)
        return:
          type: System.Collections.Generic.List{LevelGenerator.Generator.GridRoom}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel
      commentId: M:LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel
      language: CSharp
      name:
        CSharp: GenerateNewLevel()
        VB: GenerateNewLevel()
      nameWithType:
        CSharp: GridLevelGenerator.GenerateNewLevel()
        VB: GridLevelGenerator.GenerateNewLevel()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel()
        VB: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GenerateNewLevel
        path: ''
        startLine: 120
      summary: "\nGenerates a new level.\n"
      example: []
      syntax:
        content:
          CSharp: public void GenerateNewLevel()
          VB: Public Sub GenerateNewLevel
      overload: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed
      commentId: M:LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed
      language: CSharp
      name:
        CSharp: GenerateLevelFromSeed()
        VB: GenerateLevelFromSeed()
      nameWithType:
        CSharp: GridLevelGenerator.GenerateLevelFromSeed()
        VB: GridLevelGenerator.GenerateLevelFromSeed()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed()
        VB: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GenerateLevelFromSeed
        path: ''
        startLine: 131
      summary: "\nGenerates Level From Seed.\n"
      example: []
      syntax:
        content:
          CSharp: public void GenerateLevelFromSeed()
          VB: Public Sub GenerateLevelFromSeed
      overload: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.ClearLevel
      commentId: M:LevelGenerator.Generator.GridLevelGenerator.ClearLevel
      language: CSharp
      name:
        CSharp: ClearLevel()
        VB: ClearLevel()
      nameWithType:
        CSharp: GridLevelGenerator.ClearLevel()
        VB: GridLevelGenerator.ClearLevel()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.ClearLevel()
        VB: LevelGenerator.Generator.GridLevelGenerator.ClearLevel()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: ClearLevel
        path: ''
        startLine: 152
      summary: "\nClears the current level.\n"
      example: []
      syntax:
        content:
          CSharp: public void ClearLevel()
          VB: Public Sub ClearLevel
      overload: LevelGenerator.Generator.GridLevelGenerator.ClearLevel*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.SetSeed(System.String)
      commentId: M:LevelGenerator.Generator.GridLevelGenerator.SetSeed(System.String)
      language: CSharp
      name:
        CSharp: SetSeed(String)
        VB: SetSeed(String)
      nameWithType:
        CSharp: GridLevelGenerator.SetSeed(String)
        VB: GridLevelGenerator.SetSeed(String)
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.SetSeed(System.String)
        VB: LevelGenerator.Generator.GridLevelGenerator.SetSeed(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: SetSeed
        path: ''
        startLine: 164
      summary: "\nSets the seed for the level generator. Returns false if seed is invalid.\n"
      example: []
      syntax:
        content:
          CSharp: public bool SetSeed(string seed)
          VB: Public Function SetSeed(seed As String) As Boolean
        parameters:
        - id: seed
          type: System.String
        return:
          type: System.Boolean
      overload: LevelGenerator.Generator.GridLevelGenerator.SetSeed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridLevelGenerator.GetSeed
      commentId: M:LevelGenerator.Generator.GridLevelGenerator.GetSeed
      language: CSharp
      name:
        CSharp: GetSeed()
        VB: GetSeed()
      nameWithType:
        CSharp: GridLevelGenerator.GetSeed()
        VB: GridLevelGenerator.GetSeed()
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridLevelGenerator.GetSeed()
        VB: LevelGenerator.Generator.GridLevelGenerator.GetSeed()
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: GetSeed
        path: ''
        startLine: 176
      summary: "\nReturns the seed of the last generated level.\n"
      example: []
      syntax:
        content:
          CSharp: public string GetSeed()
          VB: Public Function GetSeed As String
        return:
          type: System.String
      overload: LevelGenerator.Generator.GridLevelGenerator.GetSeed*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
  - id: LevelGenerator.Generator.GridRoom
    commentId: T:LevelGenerator.Generator.GridRoom
    language: CSharp
    name:
      CSharp: GridRoom
      VB: GridRoom
    nameWithType:
      CSharp: GridRoom
      VB: GridRoom
    qualifiedName:
      CSharp: LevelGenerator.Generator.GridRoom
      VB: LevelGenerator.Generator.GridRoom
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Generator
    source:
      id: GridRoom
      path: ''
      startLine: 456
    syntax:
      content:
        CSharp: >-
          [Serializable]

          public class GridRoom
        VB: >-
          <Serializable>

          Public Class GridRoom
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    attributes:
    - type: System.SerializableAttribute
      ctor: System.SerializableAttribute.#ctor
      arguments: []
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: LevelGenerator.Generator.GridRoom.prefab
      commentId: F:LevelGenerator.Generator.GridRoom.prefab
      language: CSharp
      name:
        CSharp: prefab
        VB: prefab
      nameWithType:
        CSharp: GridRoom.prefab
        VB: GridRoom.prefab
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.prefab
        VB: LevelGenerator.Generator.GridRoom.prefab
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: prefab
        path: ''
        startLine: 459
      syntax:
        content:
          CSharp: public GameObject prefab
          VB: Public prefab As GameObject
        return:
          type: GameObject
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.exitDirections
      commentId: F:LevelGenerator.Generator.GridRoom.exitDirections
      language: CSharp
      name:
        CSharp: exitDirections
        VB: exitDirections
      nameWithType:
        CSharp: GridRoom.exitDirections
        VB: GridRoom.exitDirections
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.exitDirections
        VB: LevelGenerator.Generator.GridRoom.exitDirections
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: exitDirections
        path: ''
        startLine: 460
      syntax:
        content:
          CSharp: public List<ExitDirection> exitDirections
          VB: Public exitDirections As List(Of ExitDirection)
        return:
          type: System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.isEssential
      commentId: F:LevelGenerator.Generator.GridRoom.isEssential
      language: CSharp
      name:
        CSharp: isEssential
        VB: isEssential
      nameWithType:
        CSharp: GridRoom.isEssential
        VB: GridRoom.isEssential
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.isEssential
        VB: LevelGenerator.Generator.GridRoom.isEssential
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: isEssential
        path: ''
        startLine: 461
      syntax:
        content:
          CSharp: public bool isEssential
          VB: Public isEssential As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.hasFixedPosition
      commentId: F:LevelGenerator.Generator.GridRoom.hasFixedPosition
      language: CSharp
      name:
        CSharp: hasFixedPosition
        VB: hasFixedPosition
      nameWithType:
        CSharp: GridRoom.hasFixedPosition
        VB: GridRoom.hasFixedPosition
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.hasFixedPosition
        VB: LevelGenerator.Generator.GridRoom.hasFixedPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: hasFixedPosition
        path: ''
        startLine: 461
      syntax:
        content:
          CSharp: public bool hasFixedPosition
          VB: Public hasFixedPosition As Boolean
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: LevelGenerator.Generator.GridRoom.fixedPosition
      commentId: F:LevelGenerator.Generator.GridRoom.fixedPosition
      language: CSharp
      name:
        CSharp: fixedPosition
        VB: fixedPosition
      nameWithType:
        CSharp: GridRoom.fixedPosition
        VB: GridRoom.fixedPosition
      qualifiedName:
        CSharp: LevelGenerator.Generator.GridRoom.fixedPosition
        VB: LevelGenerator.Generator.GridRoom.fixedPosition
      type: Field
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Generator
      source:
        id: fixedPosition
        path: ''
        startLine: 462
      syntax:
        content:
          CSharp: public Vector2 fixedPosition
          VB: Public fixedPosition As Vector2
        return:
          type: Vector2
      modifiers:
        CSharp:
        - public
        VB:
        - Public
- id: LevelGenerator.Utility
  commentId: N:LevelGenerator.Utility
  language: CSharp
  name:
    CSharp: LevelGenerator.Utility
    VB: LevelGenerator.Utility
  nameWithType:
    CSharp: LevelGenerator.Utility
    VB: LevelGenerator.Utility
  qualifiedName:
    CSharp: LevelGenerator.Utility
    VB: LevelGenerator.Utility
  type: Namespace
  assemblies:
  - cs.temp.dll
  modifiers: {}
  items:
  - id: LevelGenerator.Utility.GridLevelUtility
    commentId: T:LevelGenerator.Utility.GridLevelUtility
    language: CSharp
    name:
      CSharp: GridLevelUtility
      VB: GridLevelUtility
    nameWithType:
      CSharp: GridLevelUtility
      VB: GridLevelUtility
    qualifiedName:
      CSharp: LevelGenerator.Utility.GridLevelUtility
      VB: LevelGenerator.Utility.GridLevelUtility
    type: Class
    assemblies:
    - cs.temp.dll
    namespace: LevelGenerator.Utility
    source:
      id: GridLevelUtility
      path: ''
      startLine: 470
    syntax:
      content:
        CSharp: public static class GridLevelUtility
        VB: Public Module GridLevelUtility
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: LevelGenerator.Utility.GridLevelUtility.ValidateSeed(System.String)
      commentId: M:LevelGenerator.Utility.GridLevelUtility.ValidateSeed(System.String)
      language: CSharp
      name:
        CSharp: ValidateSeed(String)
        VB: ValidateSeed(String)
      nameWithType:
        CSharp: GridLevelUtility.ValidateSeed(String)
        VB: GridLevelUtility.ValidateSeed(String)
      qualifiedName:
        CSharp: LevelGenerator.Utility.GridLevelUtility.ValidateSeed(System.String)
        VB: LevelGenerator.Utility.GridLevelUtility.ValidateSeed(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Utility
      source:
        id: ValidateSeed
        path: ''
        startLine: 474
      syntax:
        content:
          CSharp: public static bool ValidateSeed(string seed)
          VB: Public Shared Function ValidateSeed(seed As String) As Boolean
        parameters:
        - id: seed
          type: System.String
        return:
          type: System.Boolean
      overload: LevelGenerator.Utility.GridLevelUtility.ValidateSeed*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData(System.String)
      commentId: M:LevelGenerator.Utility.GridLevelUtility.ExtractSeedData(System.String)
      language: CSharp
      name:
        CSharp: ExtractSeedData(String)
        VB: ExtractSeedData(String)
      nameWithType:
        CSharp: GridLevelUtility.ExtractSeedData(String)
        VB: GridLevelUtility.ExtractSeedData(String)
      qualifiedName:
        CSharp: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData(System.String)
        VB: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData(System.String)
      type: Method
      assemblies:
      - cs.temp.dll
      namespace: LevelGenerator.Utility
      source:
        id: ExtractSeedData
        path: ''
        startLine: 487
      syntax:
        content:
          CSharp: public static uint[] ExtractSeedData(string seed)
          VB: Public Shared Function ExtractSeedData(seed As String) As UInteger()
        parameters:
        - id: seed
          type: System.String
        return:
          type: System.UInt32[]
      overload: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  Vector2:
    name:
      CSharp:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
      VB:
      - id: Vector2
        name: Vector2
        nameWithType: Vector2
        qualifiedName: Vector2
        isExternal: true
    isDefinition: true
  Vector3:
    name:
      CSharp:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
      VB:
      - id: Vector3
        name: Vector3
        nameWithType: Vector3
        qualifiedName: Vector3
        isExternal: true
    isDefinition: true
  LevelGenerator.Generator.GridCell.#ctor*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.#ctor*
        name: GridCell
        nameWithType: GridCell.GridCell
        qualifiedName: LevelGenerator.Generator.GridCell.GridCell
      VB:
      - id: LevelGenerator.Generator.GridCell.#ctor*
        name: GridCell
        nameWithType: GridCell.GridCell
        qualifiedName: LevelGenerator.Generator.GridCell.GridCell
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.#ctor
  LevelGenerator.Generator:
    name:
      CSharp:
      - name: LevelGenerator.Generator
        nameWithType: LevelGenerator.Generator
        qualifiedName: LevelGenerator.Generator
      VB:
      - name: LevelGenerator.Generator
        nameWithType: LevelGenerator.Generator
        qualifiedName: LevelGenerator.Generator
    isDefinition: true
    commentId: N:LevelGenerator.Generator
  LevelGenerator.Generator.GridCell:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      VB:
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.GridCell
  LevelGenerator.Generator.GridCell.AddNeighbour*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.AddNeighbour*
        name: AddNeighbour
        nameWithType: GridCell.AddNeighbour
        qualifiedName: LevelGenerator.Generator.GridCell.AddNeighbour
      VB:
      - id: LevelGenerator.Generator.GridCell.AddNeighbour*
        name: AddNeighbour
        nameWithType: GridCell.AddNeighbour
        qualifiedName: LevelGenerator.Generator.GridCell.AddNeighbour
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.AddNeighbour
  LevelGenerator.Generator.GridRoom:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
      VB:
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.GridRoom
  LevelGenerator.Generator.GridCell.InstantiateRoom*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.InstantiateRoom*
        name: InstantiateRoom
        nameWithType: GridCell.InstantiateRoom
        qualifiedName: LevelGenerator.Generator.GridCell.InstantiateRoom
      VB:
      - id: LevelGenerator.Generator.GridCell.InstantiateRoom*
        name: InstantiateRoom
        nameWithType: GridCell.InstantiateRoom
        qualifiedName: LevelGenerator.Generator.GridCell.InstantiateRoom
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.InstantiateRoom
  LevelGenerator.Generator.GridCell.GetGridPosition*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetGridPosition*
        name: GetGridPosition
        nameWithType: GridCell.GetGridPosition
        qualifiedName: LevelGenerator.Generator.GridCell.GetGridPosition
      VB:
      - id: LevelGenerator.Generator.GridCell.GetGridPosition*
        name: GetGridPosition
        nameWithType: GridCell.GetGridPosition
        qualifiedName: LevelGenerator.Generator.GridCell.GetGridPosition
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetGridPosition
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
        isExternal: true
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: LevelGenerator.Generator.GridCell
        name: GridCell
        nameWithType: GridCell
        qualifiedName: LevelGenerator.Generator.GridCell
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{LevelGenerator.Generator.GridCell}
  LevelGenerator.Generator.GridCell.GetNeighbours*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetNeighbours*
        name: GetNeighbours
        nameWithType: GridCell.GetNeighbours
        qualifiedName: LevelGenerator.Generator.GridCell.GetNeighbours
      VB:
      - id: LevelGenerator.Generator.GridCell.GetNeighbours*
        name: GetNeighbours
        nameWithType: GridCell.GetNeighbours
        qualifiedName: LevelGenerator.Generator.GridCell.GetNeighbours
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetNeighbours
  GameObject:
    name:
      CSharp:
      - id: GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
      VB:
      - id: GameObject
        name: GameObject
        nameWithType: GameObject
        qualifiedName: GameObject
        isExternal: true
    isDefinition: true
  LevelGenerator.Generator.GridCell.GetPrefab*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.GetPrefab*
        name: GetPrefab
        nameWithType: GridCell.GetPrefab
        qualifiedName: LevelGenerator.Generator.GridCell.GetPrefab
      VB:
      - id: LevelGenerator.Generator.GridCell.GetPrefab*
        name: GetPrefab
        nameWithType: GridCell.GetPrefab
        qualifiedName: LevelGenerator.Generator.GridCell.GetPrefab
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.GetPrefab
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  LevelGenerator.Generator.ExitDirection:
    name:
      CSharp:
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      VB:
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.ExitDirection
  LevelGenerator.Generator.GridCell.HasExit*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.HasExit*
        name: HasExit
        nameWithType: GridCell.HasExit
        qualifiedName: LevelGenerator.Generator.GridCell.HasExit
      VB:
      - id: LevelGenerator.Generator.GridCell.HasExit*
        name: HasExit
        nameWithType: GridCell.HasExit
        qualifiedName: LevelGenerator.Generator.GridCell.HasExit
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.HasExit
  LevelGenerator.Generator.GridCell.HasRoom*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridCell.HasRoom*
        name: HasRoom
        nameWithType: GridCell.HasRoom
        qualifiedName: LevelGenerator.Generator.GridCell.HasRoom
      VB:
      - id: LevelGenerator.Generator.GridCell.HasRoom*
        name: HasRoom
        nameWithType: GridCell.HasRoom
        qualifiedName: LevelGenerator.Generator.GridCell.HasRoom
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridCell.HasRoom
  System.SerializableAttribute:
    name:
      CSharp:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
      VB:
      - id: System.SerializableAttribute
        name: SerializableAttribute
        nameWithType: SerializableAttribute
        qualifiedName: System.SerializableAttribute
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.SerializableAttribute
  System.SerializableAttribute.#ctor:
    name:
      CSharp:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.SerializableAttribute.#ctor
        name: SerializableAttribute
        nameWithType: SerializableAttribute.SerializableAttribute
        qualifiedName: System.SerializableAttribute.SerializableAttribute
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.SerializableAttribute
    commentId: M:System.SerializableAttribute.#ctor
  LevelGenerator.Generator.GridAlignment:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridAlignment
        name: GridAlignment
        nameWithType: GridAlignment
        qualifiedName: LevelGenerator.Generator.GridAlignment
      VB:
      - id: LevelGenerator.Generator.GridAlignment
        name: GridAlignment
        nameWithType: GridAlignment
        qualifiedName: LevelGenerator.Generator.GridAlignment
    isDefinition: true
    parent: LevelGenerator.Generator
    commentId: T:LevelGenerator.Generator.GridAlignment
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Collections.Generic.List`1:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.List`1
  System.Collections.Generic.List{LevelGenerator.Generator.GridRoom}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: LevelGenerator.Generator.GridRoom
        name: GridRoom
        nameWithType: GridRoom
        qualifiedName: LevelGenerator.Generator.GridRoom
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{LevelGenerator.Generator.GridRoom}
  LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel*
        name: GenerateNewLevel
        nameWithType: GridLevelGenerator.GenerateNewLevel
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel*
        name: GenerateNewLevel
        nameWithType: GridLevelGenerator.GenerateNewLevel
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridLevelGenerator.GenerateNewLevel
  LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed*
        name: GenerateLevelFromSeed
        nameWithType: GridLevelGenerator.GenerateLevelFromSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed*
        name: GenerateLevelFromSeed
        nameWithType: GridLevelGenerator.GenerateLevelFromSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridLevelGenerator.GenerateLevelFromSeed
  LevelGenerator.Generator.GridLevelGenerator.ClearLevel*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator.ClearLevel*
        name: ClearLevel
        nameWithType: GridLevelGenerator.ClearLevel
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.ClearLevel
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator.ClearLevel*
        name: ClearLevel
        nameWithType: GridLevelGenerator.ClearLevel
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.ClearLevel
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridLevelGenerator.ClearLevel
  LevelGenerator.Generator.GridLevelGenerator.SetSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator.SetSeed*
        name: SetSeed
        nameWithType: GridLevelGenerator.SetSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.SetSeed
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator.SetSeed*
        name: SetSeed
        nameWithType: GridLevelGenerator.SetSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.SetSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridLevelGenerator.SetSeed
  LevelGenerator.Generator.GridLevelGenerator.GetSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator.GetSeed*
        name: GetSeed
        nameWithType: GridLevelGenerator.GetSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GetSeed
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator.GetSeed*
        name: GetSeed
        nameWithType: GridLevelGenerator.GetSeed
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator.GetSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Generator.GridLevelGenerator.GetSeed
  LevelGenerator.Generator.GridLevelGenerator:
    name:
      CSharp:
      - id: LevelGenerator.Generator.GridLevelGenerator
        name: GridLevelGenerator
        nameWithType: GridLevelGenerator
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator
      VB:
      - id: LevelGenerator.Generator.GridLevelGenerator
        name: GridLevelGenerator
        nameWithType: GridLevelGenerator
        qualifiedName: LevelGenerator.Generator.GridLevelGenerator
    isDefinition: true
    commentId: T:LevelGenerator.Generator.GridLevelGenerator
  System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}:
    name:
      CSharp:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.List`1
        name: List
        nameWithType: List
        qualifiedName: System.Collections.Generic.List
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - id: LevelGenerator.Generator.ExitDirection
        name: ExitDirection
        nameWithType: ExitDirection
        qualifiedName: LevelGenerator.Generator.ExitDirection
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.List`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.List{LevelGenerator.Generator.ExitDirection}
  LevelGenerator.Utility.GridLevelUtility.ValidateSeed*:
    name:
      CSharp:
      - id: LevelGenerator.Utility.GridLevelUtility.ValidateSeed*
        name: ValidateSeed
        nameWithType: GridLevelUtility.ValidateSeed
        qualifiedName: LevelGenerator.Utility.GridLevelUtility.ValidateSeed
      VB:
      - id: LevelGenerator.Utility.GridLevelUtility.ValidateSeed*
        name: ValidateSeed
        nameWithType: GridLevelUtility.ValidateSeed
        qualifiedName: LevelGenerator.Utility.GridLevelUtility.ValidateSeed
    isDefinition: true
    commentId: Overload:LevelGenerator.Utility.GridLevelUtility.ValidateSeed
  System.UInt32[]:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  LevelGenerator.Utility.GridLevelUtility.ExtractSeedData*:
    name:
      CSharp:
      - id: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData*
        name: ExtractSeedData
        nameWithType: GridLevelUtility.ExtractSeedData
        qualifiedName: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData
      VB:
      - id: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData*
        name: ExtractSeedData
        nameWithType: GridLevelUtility.ExtractSeedData
        qualifiedName: LevelGenerator.Utility.GridLevelUtility.ExtractSeedData
    isDefinition: true
    commentId: Overload:LevelGenerator.Utility.GridLevelUtility.ExtractSeedData
  LevelGenerator.Utility.GridLevelUtility:
    name:
      CSharp:
      - id: LevelGenerator.Utility.GridLevelUtility
        name: GridLevelUtility
        nameWithType: GridLevelUtility
        qualifiedName: LevelGenerator.Utility.GridLevelUtility
      VB:
      - id: LevelGenerator.Utility.GridLevelUtility
        name: GridLevelUtility
        nameWithType: GridLevelUtility
        qualifiedName: LevelGenerator.Utility.GridLevelUtility
    isDefinition: true
    commentId: T:LevelGenerator.Utility.GridLevelUtility
  LevelGenerator.Utility:
    name:
      CSharp:
      - name: LevelGenerator.Utility
        nameWithType: LevelGenerator.Utility
        qualifiedName: LevelGenerator.Utility
      VB:
      - name: LevelGenerator.Utility
        nameWithType: LevelGenerator.Utility
        qualifiedName: LevelGenerator.Utility
    isDefinition: true
    commentId: N:LevelGenerator.Utility
